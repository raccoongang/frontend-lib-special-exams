{"version":3,"sources":["../../src/core/OuterExamTimer.jsx"],"names":["ExamTimer","courseId","state","ExamStateContext","AppContext","authenticatedUser","activeAttempt","showTimer","stopExam","submitExam","expireExam","pollAttempt","apiErrorMsg","pingAttempt","getExamAttemptsData","propTypes","PropTypes","string","isRequired","OuterExamTimer"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAClC,MAAMC,KAAK,GAAG,uBAAWC,gBAAX,CAAd;;AACA,oBAA8B,uBAAWC,kBAAX,CAA9B;AAAA,MAAQC,iBAAR,eAAQA,iBAAR;;AACA,MACEC,aADF,GAIIJ,KAJJ,CACEI,aADF;AAAA,MACiBC,SADjB,GAIIL,KAJJ,CACiBK,SADjB;AAAA,MAC4BC,QAD5B,GAIIN,KAJJ,CAC4BM,QAD5B;AAAA,MACsCC,UADtC,GAIIP,KAJJ,CACsCO,UADtC;AAAA,MAEEC,UAFF,GAIIR,KAJJ,CAEEQ,UAFF;AAAA,MAEcC,WAFd,GAIIT,KAJJ,CAEcS,WAFd;AAAA,MAE2BC,WAF3B,GAIIV,KAJJ,CAE2BU,WAF3B;AAAA,MAEwCC,WAFxC,GAIIX,KAJJ,CAEwCW,WAFxC;AAAA,MAGEC,mBAHF,GAIIZ,KAJJ,CAGEY,mBAHF,CAHkC,CASlC;AACA;;AACA,MAAI,CAACT,iBAAL,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,wBAAU,YAAM;AACdS,IAAAA,mBAAmB,CAACb,QAAD,CAAnB;AACD,GAFD,EAEG,CAACA,QAAD,CAFH;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGM,SAAS,iBACR,6BAAC,qBAAD;AACE,IAAA,OAAO,EAAED,aADX;AAEE,IAAA,eAAe,EAAEE,QAFnB;AAGE,IAAA,UAAU,EAAEC,UAHd;AAIE,IAAA,iBAAiB,EAAEC,UAJrB;AAKE,IAAA,eAAe,EAAEC,WALnB;AAME,IAAA,WAAW,EAAEE;AANf,IAFJ,EAWGD,WAAW,iBAAI,6BAAC,qBAAD,OAXlB,CADF;AAeD,CAlCD;;AAoCAZ,SAAS,CAACe,SAAV,GAAsB;AACpBd,EAAAA,QAAQ,EAAEe,mBAAUC,MAAV,CAAiBC;AADP,CAAtB;AAIA;AACA;AACA;AACA;AACA;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAGlB,QAAH,SAAGA,QAAH;AAAA,sBACrB,6BAAC,0BAAD,qBACE,6BAAC,SAAD;AAAW,IAAA,QAAQ,EAAEA;AAArB,IADF,CADqB;AAAA,CAAvB;;AAMAkB,cAAc,CAACJ,SAAf,GAA2B;AACzBd,EAAAA,QAAQ,EAAEe,mBAAUC,MAAV,CAAiBC;AADF,CAA3B;eAIeC,c","sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport ExamStateContext from '../context';\nimport { ExamTimerBlock } from '../timer';\nimport ExamAPIError from '../exam/ExamAPIError';\nimport ExamStateProvider from './ExamStateProvider';\n\nconst ExamTimer = ({ courseId }) => {\n  const state = useContext(ExamStateContext);\n  const { authenticatedUser } = useContext(AppContext);\n  const {\n    activeAttempt, showTimer, stopExam, submitExam,\n    expireExam, pollAttempt, apiErrorMsg, pingAttempt,\n    getExamAttemptsData,\n  } = state;\n\n  // if user is not authenticated they cannot have active exam, so no need for timer\n  // (also exam API would return 403 error)\n  if (!authenticatedUser) {\n    return null;\n  }\n\n  useEffect(() => {\n    getExamAttemptsData(courseId);\n  }, [courseId]);\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {showTimer && (\n        <ExamTimerBlock\n          attempt={activeAttempt}\n          stopExamAttempt={stopExam}\n          submitExam={submitExam}\n          expireExamAttempt={expireExam}\n          pollExamAttempt={pollAttempt}\n          pingAttempt={pingAttempt}\n        />\n      )}\n      {apiErrorMsg && <ExamAPIError />}\n    </div>\n  );\n};\n\nExamTimer.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\n/**\n * OuterExamTimer is the component responsible for showing exam timer on non-sequence pages.\n * @param courseId - Id of a course that is checked for active exams, if there is one the timer\n * will be shown.\n */\nconst OuterExamTimer = ({ courseId }) => (\n  <ExamStateProvider>\n    <ExamTimer courseId={courseId} />\n  </ExamStateProvider>\n);\n\nOuterExamTimer.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default OuterExamTimer;\n"],"file":"OuterExamTimer.js"}