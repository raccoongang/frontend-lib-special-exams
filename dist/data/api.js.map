{"version":3,"sources":["../../src/data/api.js"],"names":["BASE_API_URL","fetchExamAttemptsData","courseId","sequenceId","url","URL","LMS_BASE_URL","searchParams","append","get","href","data","pollExamAttempt","createExamAttempt","examId","startClock","attemptProctored","payload","exam_id","start_clock","toString","attempt_proctored","post","updateAttemptStatus","attemptId","action","detail","put","stopAttempt","ExamAction","STOP","continueAttempt","START","submitAttempt","SUBMIT","resetAttempt","RESET","endExamWithFailure","error","ERROR","softwareDownloadAttempt","CLICK_DOWNLOAD_SOFTWARE","declineAttempt","DECLINE","fetchExamReviewPolicy","fetchProctoringSettings","fetchVerificationStatus"],"mappings":"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","sourcesContent":["import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { ExamAction } from '../constants';\n\nconst BASE_API_URL = '/api/edx_proctoring/v1/proctored_exam/attempt';\n\nexport async function fetchExamAttemptsData(courseId, sequenceId) {\n  const url = new URL(\n    `${getConfig().LMS_BASE_URL}${BASE_API_URL}/course_id/${courseId}`,\n  );\n  if (sequenceId) {\n    url.searchParams.append('content_id', sequenceId);\n  }\n  url.searchParams.append('is_learning_mfe', true);\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n\nexport async function pollExamAttempt(url) {\n  const { data } = await getAuthenticatedHttpClient().get(`${getConfig().LMS_BASE_URL}${url}`);\n  return data;\n}\n\nexport async function createExamAttempt(examId, startClock = true, attemptProctored = false) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}${BASE_API_URL}`);\n  const payload = {\n    exam_id: examId,\n    start_clock: startClock.toString(),\n    attempt_proctored: attemptProctored.toString(),\n  };\n  const { data } = await getAuthenticatedHttpClient().post(url.href, payload);\n  return data;\n}\n\nexport async function updateAttemptStatus(attemptId, action, detail = null) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}${BASE_API_URL}/${attemptId}`);\n  const payload = { action };\n  if (detail) {\n    payload.detail = detail;\n  }\n  const { data } = await getAuthenticatedHttpClient().put(url.href, payload);\n  return data;\n}\n\nexport async function stopAttempt(attemptId) {\n  return updateAttemptStatus(attemptId, ExamAction.STOP);\n}\n\nexport async function continueAttempt(attemptId) {\n  return updateAttemptStatus(attemptId, ExamAction.START);\n}\n\nexport async function submitAttempt(attemptId) {\n  return updateAttemptStatus(attemptId, ExamAction.SUBMIT);\n}\n\nexport async function resetAttempt(attemptId) {\n  return updateAttemptStatus(attemptId, ExamAction.RESET);\n}\n\nexport async function endExamWithFailure(attemptId, error) {\n  return updateAttemptStatus(attemptId, ExamAction.ERROR, error);\n}\n\nexport async function softwareDownloadAttempt(attemptId) {\n  return updateAttemptStatus(attemptId, ExamAction.CLICK_DOWNLOAD_SOFTWARE);\n}\n\nexport async function declineAttempt(attemptId) {\n  return updateAttemptStatus(attemptId, ExamAction.DECLINE);\n}\n\nexport async function fetchExamReviewPolicy(examId) {\n  const url = new URL(\n    `${getConfig().LMS_BASE_URL}/api/edx_proctoring/v1/proctored_exam/review_policy/exam_id/${examId}/`,\n  );\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n\nexport async function fetchProctoringSettings(examId) {\n  const url = new URL(`${getConfig().LMS_BASE_URL}/api/edx_proctoring/v1/proctored_exam/settings/exam_id/${examId}/`);\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n\nexport async function fetchVerificationStatus() {\n  const url = new URL(\n    `${getConfig().LMS_BASE_URL}/verify_student/status/`,\n  );\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n"],"file":"api.js"}