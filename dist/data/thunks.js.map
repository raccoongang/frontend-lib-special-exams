{"version":3,"sources":["../../src/data/thunks.js"],"names":["handleAPIError","error","dispatch","message","detail","errorMsg","updateAttemptAfter","courseId","sequenceId","promiseToBeResolvedFirst","noLoading","isLoading","response","exam_attempt_id","attemptData","exam","activeAttempt","active_attempt","getExamAttemptsData","getProctoringSettings","getState","examState","id","proctoringSettings","startTimedExam","course_id","content_id","createProctoredExamAttempt","startProctoredExam","attempt","workerUrl","desktop_application_js_url","useWorker","window","Worker","actionToMessageTypesMap","start","then","attempt_id","catch","skipProctoringExam","attemptId","pollAttempt","url","currentAttempt","attempt_status","ExamStatus","READY_TO_SUBMIT","data","updatedAttempt","time_remaining_seconds","accessibility_time_string","status","SUBMITTED","stopExam","examUrl","exam_url_path","location","href","continueExam","resetExam","submitExam","handleBackendProviderSubmission","submit","expireExam","pingAttempt","timeoutInSeconds","startProctoringSoftwareDownload","getVerificationData","verification","getExamReviewPolicy","policy","review_policy","getAllowProctoringOptOut","allowProctoringOptOut"],"mappings":"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","sourcesContent":["import { logError } from '@edx/frontend-platform/logging';\nimport {\n  fetchExamAttemptsData,\n  createExamAttempt,\n  stopAttempt,\n  continueAttempt,\n  submitAttempt,\n  pollExamAttempt,\n  fetchProctoringSettings,\n  softwareDownloadAttempt,\n  fetchVerificationStatus,\n  fetchExamReviewPolicy,\n  resetAttempt,\n  declineAttempt,\n  endExamWithFailure,\n} from './api';\nimport { isEmpty } from '../helpers';\nimport {\n  setIsLoading,\n  setExamState,\n  expireExamAttempt,\n  setActiveAttempt,\n  setProctoringSettings,\n  setVerificationData,\n  setReviewPolicy,\n  setApiError,\n  setAllowProctoringOptOut,\n} from './slice';\nimport { ExamStatus } from '../constants';\nimport { workerPromiseForEventNames, pingApplication } from './messages/handlers';\nimport actionToMessageTypesMap from './messages/constants';\n\nfunction handleAPIError(error, dispatch) {\n  const { message, detail } = error;\n  dispatch(setApiError({ errorMsg: message || detail }));\n}\n\n/**\n * Fetch attempt data and update exam state after performing another action if it is provided.\n * It is assumed that action somehow modifies attempt in the backend, that's why the state needs\n * to be updated.\n * @param courseId - id of a course\n * @param sequenceId - id of a sequence\n * @param promiseToBeResolvedFirst - a promise that should get resolved before fetching attempt data\n * @param noLoading - if set to false shows spinner while executing the function\n */\nfunction updateAttemptAfter(courseId, sequenceId, promiseToBeResolvedFirst = null, noLoading = false) {\n  return async (dispatch) => {\n    if (!noLoading) { dispatch(setIsLoading({ isLoading: true })); }\n    if (promiseToBeResolvedFirst) {\n      try {\n        const response = await promiseToBeResolvedFirst;\n        if (!response || !response.exam_attempt_id) {\n          if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n          return;\n        }\n      } catch (error) {\n        handleAPIError(error, dispatch);\n        if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n      }\n    }\n\n    try {\n      const attemptData = await fetchExamAttemptsData(courseId, sequenceId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n    }\n  };\n}\n\nexport function getExamAttemptsData(courseId, sequenceId) {\n  return updateAttemptAfter(courseId, sequenceId);\n}\n\nexport function getProctoringSettings() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to get exam settings. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch proctoring settings. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const proctoringSettings = await fetchProctoringSettings(exam.id);\n      dispatch(setProctoringSettings({ proctoringSettings }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\n/**\n * Start a timed exam\n */\nexport function startTimedExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to start exam. No exam id.');\n      handleAPIError(\n        { message: 'Failed to start exam. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, createExamAttempt(exam.id),\n    )(dispatch);\n  };\n}\n\nexport function createProctoredExamAttempt() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to create exam attempt. No exam id.');\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, createExamAttempt(exam.id, false, true),\n    )(dispatch);\n  };\n}\n\n/**\n * Start a proctored exam (including onboarding and practice exams)\n */\nexport function startProctoredExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const { attempt } = exam || {};\n    if (!exam.id) {\n      logError('Failed to start proctored exam. No exam id.');\n      return;\n    }\n    const { desktop_application_js_url: workerUrl } = attempt || {};\n    const useWorker = window.Worker && workerUrl;\n\n    if (useWorker) {\n      workerPromiseForEventNames(actionToMessageTypesMap.start, exam.attempt.desktop_application_js_url)()\n        .then(() => updateAttemptAfter(\n          exam.course_id, exam.content_id, continueAttempt(attempt.attempt_id),\n        )(dispatch))\n        .catch(() => handleAPIError(\n          { message: 'Something has gone wrong starting your exam. Please double-check that the application is running.' },\n          dispatch,\n        ));\n    } else {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, continueAttempt(attempt.attempt_id),\n      )(dispatch);\n    }\n  };\n}\n\nexport function skipProctoringExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to skip proctored exam. No exam id.');\n      return;\n    }\n    const attemptId = exam.attempt.attempt_id;\n    if (attemptId) {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, declineAttempt(attemptId),\n      )(dispatch);\n    } else {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, createExamAttempt(exam.id, true, false),\n      )(dispatch);\n    }\n  };\n}\n\n/**\n * Poll exam active attempt status.\n * @param url - poll attempt url\n */\nexport function pollAttempt(url) {\n  return async (dispatch, getState) => {\n    const currentAttempt = getState().examState.activeAttempt;\n\n    // If the learner is in a state where they've finished the exam\n    // and the attempt can be submitted (i.e. they are \"ready_to_submit\"),\n    // don't ping the proctoring app (which action could move\n    // the attempt into an error state).\n    if (currentAttempt && currentAttempt.attempt_status === ExamStatus.READY_TO_SUBMIT) {\n      return;\n    }\n\n    try {\n      const data = await pollExamAttempt(url);\n      const updatedAttempt = {\n        ...currentAttempt,\n        time_remaining_seconds: data.time_remaining_seconds,\n        accessibility_time_string: data.accessibility_time_string,\n        attempt_status: data.status,\n      };\n      dispatch(setActiveAttempt({\n        activeAttempt: updatedAttempt,\n      }));\n      if (data.status === ExamStatus.SUBMITTED) {\n        dispatch(expireExamAttempt());\n      }\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function stopExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n\n    if (!activeAttempt) {\n      logError('Failed to stop exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to stop exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const { attempt_id: attemptId, exam_url_path: examUrl } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await stopAttempt(attemptId);\n        window.location.href = examUrl;\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, stopAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function continueExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    if (!attemptId) {\n      logError('Failed to continue exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to continue exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, continueAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function resetExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    if (!attemptId) {\n      logError('Failed to reset exam attempt. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to reset exam attempt. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, resetAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function submitExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    const { desktop_application_js_url: workerUrl } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    const handleBackendProviderSubmission = () => {\n      // if a backend provider is being used during the exam\n      // send it a message that exam is being submitted\n      if (useWorker) {\n        workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)()\n          .catch(() => handleAPIError(\n            { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n            dispatch,\n          ));\n      }\n    };\n\n    if (!activeAttempt) {\n      logError('Failed to submit exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to submit exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const { attempt_id: attemptId, exam_url_path: examUrl } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await submitAttempt(attemptId);\n        window.location.href = examUrl;\n        handleBackendProviderSubmission();\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, submitAttempt(attemptId))(dispatch);\n    handleBackendProviderSubmission();\n  };\n}\n\nexport function expireExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    const { desktop_application_js_url: workerUrl, attempt_id: attemptId } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    if (!attemptId) {\n      logError('Failed to expire exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to expire exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    await updateAttemptAfter(\n      activeAttempt.course_id, exam.content_id, submitAttempt(attemptId),\n    )(dispatch);\n    dispatch(expireExamAttempt());\n\n    if (useWorker) {\n      workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)()\n        .catch(() => handleAPIError(\n          { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n          dispatch,\n        ));\n    }\n  };\n}\n\n/**\n * Ping provider application (used for proctored exams).\n * @param timeoutInSeconds - time to wait for worker response before raising an error\n * @param workerUrl - location of the worker from the provider\n */\nexport function pingAttempt(timeoutInSeconds, workerUrl) {\n  return async (dispatch, getState) => {\n    await pingApplication(timeoutInSeconds, workerUrl)\n      .catch(async (error) => {\n        const { exam, activeAttempt } = getState().examState;\n        const message = error ? error.message : 'Worker failed to respond.';\n        await updateAttemptAfter(\n          exam.course_id, exam.content_id, endExamWithFailure(activeAttempt.attempt_id, message),\n        )(dispatch);\n      });\n  };\n}\n\nexport function startProctoringSoftwareDownload() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    if (!attemptId) {\n      logError('Failed to start downloading proctoring software. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to start downloading proctoring software. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, softwareDownloadAttempt(attemptId),\n    )(dispatch);\n  };\n}\n\nexport function getVerificationData() {\n  return async (dispatch) => {\n    try {\n      const data = await fetchVerificationStatus();\n      dispatch(setVerificationData({ verification: data }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function getExamReviewPolicy() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to fetch exam review policy. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch exam review policy. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const data = await fetchExamReviewPolicy(exam.id);\n      dispatch(setReviewPolicy({ policy: data.review_policy }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function getAllowProctoringOptOut(allowProctoringOptOut) {\n  return (dispatch) => {\n    dispatch(setAllowProctoringOptOut({ allowProctoringOptOut }));\n  };\n}\n"],"file":"thunks.js"}