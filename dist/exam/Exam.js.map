{"version":3,"sources":["../../src/exam/Exam.jsx"],"names":["Exam","isTimeLimited","children","state","ExamStateContext","isLoading","activeAttempt","showTimer","stopExam","exam","expireExam","pollAttempt","apiErrorMsg","pingAttempt","getVerificationData","getProctoringSettings","submitExam","examType","type","examId","id","ExamType","PROCTORED","sequenceContent","propTypes","PropTypes","bool","isRequired","element"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,IAAI,GAAG,SAAPA,IAAO,OAAiC;AAAA,MAA9BC,aAA8B,QAA9BA,aAA8B;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC5C,MAAMC,KAAK,GAAG,uBAAWC,gBAAX,CAAd;AACA,MACEC,SADF,GAIIF,KAJJ,CACEE,SADF;AAAA,MACaC,aADb,GAIIH,KAJJ,CACaG,aADb;AAAA,MAC4BC,SAD5B,GAIIJ,KAJJ,CAC4BI,SAD5B;AAAA,MACuCC,QADvC,GAIIL,KAJJ,CACuCK,QADvC;AAAA,MACiDC,IADjD,GAIIN,KAJJ,CACiDM,IADjD;AAAA,MAEEC,UAFF,GAIIP,KAJJ,CAEEO,UAFF;AAAA,MAEcC,WAFd,GAIIR,KAJJ,CAEcQ,WAFd;AAAA,MAE2BC,WAF3B,GAIIT,KAJJ,CAE2BS,WAF3B;AAAA,MAEwCC,WAFxC,GAIIV,KAJJ,CAEwCU,WAFxC;AAAA,MAGEC,mBAHF,GAIIX,KAJJ,CAGEW,mBAHF;AAAA,MAGuBC,qBAHvB,GAIIZ,KAJJ,CAGuBY,qBAHvB;AAAA,MAG8CC,UAH9C,GAIIb,KAJJ,CAG8Ca,UAH9C;;AAMA,cAAuCP,IAAI,IAAI,EAA/C;AAAA,MAAcQ,QAAd,SAAQC,IAAR;AAAA,MAA4BC,MAA5B,SAAwBC,EAAxB;;AAEA,wBAAU,YAAM;AACd,QAAID,MAAJ,EAAY;AACVJ,MAAAA,qBAAqB;AACtB;;AACD,QAAIE,QAAQ,KAAKI,oBAASC,SAA1B,EAAqC;AACnCR,MAAAA,mBAAmB;AACpB,KANa,CAQd;AACA;AACA;;AACD,GAXD,EAWG,CAACK,MAAD,CAXH;;AAaA,MAAId,SAAJ,EAAe;AACb,wBACE;AAAK,qBAAY,SAAjB;AAA2B,MAAA,SAAS,EAAC;AAArC,oBACE,6BAAC,gBAAD;AAAS,MAAA,SAAS,EAAC,QAAnB;AAA4B,MAAA,OAAO,EAAC;AAApC,MADF,CADF;AAKD;;AAED,MAAMkB,eAAe,gBAAG,4DAAGrB,QAAH,CAAxB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGK,SAAS,iBACR,6BAAC,qBAAD;AACE,IAAA,OAAO,EAAED,aADX;AAEE,IAAA,eAAe,EAAEE,QAFnB;AAGE,IAAA,UAAU,EAAEQ,UAHd;AAIE,IAAA,iBAAiB,EAAEN,UAJrB;AAKE,IAAA,eAAe,EAAEC,WALnB;AAME,IAAA,WAAW,EAAEE;AANf,IAFJ,EAWGD,WAAW,iBAAI,6BAAC,qBAAD,OAXlB,EAYGX,aAAa,gBACV,6BAAC,qBAAD,QAAesB,eAAf,CADU,GAEVA,eAdN,CADF;AAkBD,CAnDD;;AAqDAvB,IAAI,CAACwB,SAAL,GAAiB;AACfvB,EAAAA,aAAa,EAAEwB,mBAAUC,IAAV,CAAeC,UADf;AAEfzB,EAAAA,QAAQ,EAAEuB,mBAAUG,OAAV,CAAkBD;AAFb,CAAjB;eAKe3B,I","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Spinner } from '@edx/paragon';\nimport { ExamTimerBlock } from '../timer';\nimport Instructions from '../instructions';\nimport ExamStateContext from '../context';\nimport ExamAPIError from './ExamAPIError';\nimport { ExamType } from '../constants';\n\n/**\n * Exam component is intended to render exam instructions before and after exam.\n * It is also responsible for rendering exam timer block/component during the exam.\n * If children do not relate to exam sequence, render them directly.\n * @param isTimeLimited - boolean used to identify if we need to process sequence as an exam\n * @param children - sequence content\n * @returns {JSX.Element}\n * @constructor\n */\nconst Exam = ({ isTimeLimited, children }) => {\n  const state = useContext(ExamStateContext);\n  const {\n    isLoading, activeAttempt, showTimer, stopExam, exam,\n    expireExam, pollAttempt, apiErrorMsg, pingAttempt,\n    getVerificationData, getProctoringSettings, submitExam,\n  } = state;\n\n  const { type: examType, id: examId } = exam || {};\n\n  useEffect(() => {\n    if (examId) {\n      getProctoringSettings();\n    }\n    if (examType === ExamType.PROCTORED) {\n      getVerificationData();\n    }\n\n    // this makes sure useEffect gets called only one time after the exam has been fetched\n    // we can't leave this empty since initially exam is just an empty object, so\n    // API calls above would not get triggered\n  }, [examId]);\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"spinner\" className=\"d-flex justify-content-center align-items-center flex-column my-5 py-5\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n      </div>\n    );\n  }\n\n  const sequenceContent = <>{children}</>;\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {showTimer && (\n        <ExamTimerBlock\n          attempt={activeAttempt}\n          stopExamAttempt={stopExam}\n          submitExam={submitExam}\n          expireExamAttempt={expireExam}\n          pollExamAttempt={pollAttempt}\n          pingAttempt={pingAttempt}\n        />\n      )}\n      {apiErrorMsg && <ExamAPIError />}\n      {isTimeLimited\n        ? <Instructions>{sequenceContent}</Instructions>\n        : sequenceContent}\n    </div>\n  );\n};\n\nExam.propTypes = {\n  isTimeLimited: PropTypes.bool.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Exam;\n"],"file":"Exam.js"}