{"version":3,"sources":["../../src/exam/ExamWrapper.jsx"],"names":["ExamWrapper","children","props","state","ExamStateContext","AppContext","authenticatedUser","sequence","courseId","getExamAttemptsData","getAllowProctoringOptOut","loadInitialData","id","allowProctoringOptOut","isTimeLimited","propTypes","PropTypes","shape","string","bool","isRequired","element","defaultProps"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AAC9C,MAAMC,KAAK,GAAG,uBAAWC,iBAAX,CAAd;;AACA,oBAA8B,uBAAWC,kBAAX,CAA9B;AAAA,MAAQC,iBAAR,eAAQA,iBAAR;;AACA,MAAQC,QAAR,GAA+BL,KAA/B,CAAQK,QAAR;AAAA,MAAkBC,QAAlB,GAA+BN,KAA/B,CAAkBM,QAAlB;AACA,MAAQC,mBAAR,GAA0DN,KAA1D,CAAQM,mBAAR;AAAA,MAA6BC,wBAA7B,GAA0DP,KAA1D,CAA6BO,wBAA7B;;AACA,MAAMC,eAAe;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChBF,mBAAmB,CAACD,QAAD,EAAWD,QAAQ,CAACK,EAApB,CADH;;AAAA;AAAA;AAAA,qBAEhBF,wBAAwB,CAACH,QAAQ,CAACM,qBAAV,CAFR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfF,eAAe;AAAA;AAAA;AAAA,KAArB,CAL8C,CAU9C;AACA;;;AACA,MAAI,CAACL,iBAAL,EAAwB;AACtB,WAAOL,QAAP;AACD;;AAED,wBAAU,YAAM;AACdU,IAAAA,eAAe;AAChB,GAFD,EAEG,EAFH;AAIA,sBACE,6BAAC,aAAD;AAAM,IAAA,aAAa,EAAEJ,QAAQ,CAACO;AAA9B,KACGb,QADH,CADF;AAKD,CAzBD;;AA2BAD,WAAW,CAACe,SAAZ,GAAwB;AACtBR,EAAAA,QAAQ,EAAES,mBAAUC,KAAV,CAAgB;AACxBL,IAAAA,EAAE,EAAEI,mBAAUE,MADU;AAExBJ,IAAAA,aAAa,EAAEE,mBAAUG,IAFD;AAGxBN,IAAAA,qBAAqB,EAAEG,mBAAUG;AAHT,GAAhB,CADY;AAMtBX,EAAAA,QAAQ,EAAEQ,mBAAUE,MAAV,CAAiBE,UANL;AAOtBnB,EAAAA,QAAQ,EAAEe,mBAAUK,OAAV,CAAkBD;AAPN,CAAxB;AAUApB,WAAW,CAACsB,YAAZ,GAA2B;AACzBf,EAAAA,QAAQ,EAAE;AADe,CAA3B;eAIeP,W","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport PropTypes from 'prop-types';\nimport Exam from './Exam';\nimport ExamStateContext from '../context';\n\n/**\n * Exam wrapper is responsible for triggering initial exam data fetching and rendering Exam.\n */\nconst ExamWrapper = ({ children, ...props }) => {\n  const state = useContext(ExamStateContext);\n  const { authenticatedUser } = useContext(AppContext);\n  const { sequence, courseId } = props;\n  const { getExamAttemptsData, getAllowProctoringOptOut } = state;\n  const loadInitialData = async () => {\n    await getExamAttemptsData(courseId, sequence.id);\n    await getAllowProctoringOptOut(sequence.allowProctoringOptOut);\n  };\n\n  // if the user is browsing public content (not logged in) they cannot be in an exam\n  // any requests for exam state will 403 so just short circuit this component here\n  if (!authenticatedUser) {\n    return children;\n  }\n\n  useEffect(() => {\n    loadInitialData();\n  }, []);\n\n  return (\n    <Exam isTimeLimited={sequence.isTimeLimited}>\n      {children}\n    </Exam>\n  );\n};\n\nExamWrapper.propTypes = {\n  sequence: PropTypes.shape({\n    id: PropTypes.string,\n    isTimeLimited: PropTypes.bool,\n    allowProctoringOptOut: PropTypes.bool,\n  }),\n  courseId: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nExamWrapper.defaultProps = {\n  sequence: {},\n};\n\nexport default ExamWrapper;\n"],"file":"ExamWrapper.js"}