{"version":3,"sources":["../../src/instructions/SubmitInstructions.jsx"],"names":["SubmitExamInstructions","state","ExamStateContext","exam","continueExam","activeAttempt","timeRemaining","time_remaining_seconds","examType","type","canContinue","setCanContinue","hideContinueButton","Emitter","once","TIMER_REACHED_NULL","off","ExamType","TIMED"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,MAAMC,KAAK,GAAG,uBAAWC,gBAAX,CAAd;AACA,MAAQC,IAAR,GAA8CF,KAA9C,CAAQE,IAAR;AAAA,MAAcC,YAAd,GAA8CH,KAA9C,CAAcG,YAAd;AAAA,MAA4BC,aAA5B,GAA8CJ,KAA9C,CAA4BI,aAA5B;AACA,MAAgCC,aAAhC,GAAkDD,aAAlD,CAAQE,sBAAR;;AACA,aAA2BJ,IAAI,IAAI,EAAnC;AAAA,MAAcK,QAAd,QAAQC,IAAR;;AACA,kBAAsC,qBAASH,aAAa,GAAG,CAAzB,CAAtC;AAAA;AAAA,MAAOI,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,WAAMD,cAAc,CAAC,KAAD,CAApB;AAAA,GAA3B;;AAEA,wBAAU,YAAM;AACdE,qBAAQC,IAAR,CAAaC,0BAAb,EAAiCH,kBAAjC;;AAEA,WAAO,YAAM;AACXC,uBAAQG,GAAR,CAAYD,0BAAZ,EAAgCH,kBAAhC;AACD,KAFD;AAGD,GAND,EAMG,EANH;AAQA,sBACE,uDACE,6BAAC,kBAAD;AAAW,IAAA,SAAS,EAAC;AAArB,KACGJ,QAAQ,KAAKS,oBAASC,KAAtB,gBACG,6BAAC,uCAAD,OADH,gBAEG,6BAAC,+CAAD,OAHN,EAIGR,WAAW,iBACV,6BAAC,eAAD;AAAQ,IAAA,OAAO,EAAC,iBAAhB;AAAkC,IAAA,OAAO,EAAEN,YAA3C;AAAyD,mBAAY;AAArE,kBACE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,4CADL;AAEE,IAAA,cAAc,EAAC;AAFjB,IADF,CALJ,CADF,EAcGI,QAAQ,KAAKS,oBAASC,KAAtB,iBAA+B,6BAAC,eAAD,OAdlC,CADF;AAkBD,CAnCD;;eAqCelB,sB","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { Button, Container } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport Emitter from '../data/emitter';\nimport { ExamType } from '../constants';\nimport { SubmitProctoredExamInstructions } from './proctored_exam';\nimport { SubmitTimedExamInstructions } from './timed_exam';\nimport Footer from './proctored_exam/Footer';\nimport ExamStateContext from '../context';\nimport { TIMER_REACHED_NULL } from '../timer/events';\n\nconst SubmitExamInstructions = () => {\n  const state = useContext(ExamStateContext);\n  const { exam, continueExam, activeAttempt } = state;\n  const { time_remaining_seconds: timeRemaining } = activeAttempt;\n  const { type: examType } = exam || {};\n  const [canContinue, setCanContinue] = useState(timeRemaining > 0);\n\n  const hideContinueButton = () => setCanContinue(false);\n\n  useEffect(() => {\n    Emitter.once(TIMER_REACHED_NULL, hideContinueButton);\n\n    return () => {\n      Emitter.off(TIMER_REACHED_NULL, hideContinueButton);\n    };\n  }, []);\n\n  return (\n    <div>\n      <Container className=\"border py-5 mb-4\">\n        {examType === ExamType.TIMED\n          ? <SubmitTimedExamInstructions />\n          : <SubmitProctoredExamInstructions />}\n        {canContinue && (\n          <Button variant=\"outline-primary\" onClick={continueExam} data-testid=\"continue-exam-button\">\n            <FormattedMessage\n              id=\"exam.SubmitExamInstructions.continueButton\"\n              defaultMessage=\"No, I'd like to continue working\"\n            />\n          </Button>\n        )}\n      </Container>\n      {examType !== ExamType.TIMED && <Footer />}\n    </div>\n  );\n};\n\nexport default SubmitExamInstructions;\n"],"file":"SubmitInstructions.js"}