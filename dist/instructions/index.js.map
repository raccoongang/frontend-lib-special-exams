{"version":3,"sources":["../../src/instructions/index.jsx"],"names":["Instructions","children","state","ExamStateContext","exam","verification","attempt","examType","type","prerequisitesData","prerequisite_status","prerequisitesPassed","are_prerequisites_satisifed","verificationStatus","status","verificationUrl","verification_url","skipProctoring","toggleSkipProctoring","toggleSkipProctoredExam","expired","renderEmptyAttemptInstructions","component","ExamType","PROCTORED","expires","Date","VerificationStatus","EXPIRED","attempt_id","attempt_status","ExamStatus","CREATED","APPROVED","DOWNLOAD_SOFTWARE_CLICKED","READY_TO_START","READY_TO_SUBMIT","SUBMITTED","VERIFIED","REJECTED","ERROR","READY_TO_RESUME","propTypes","PropTypes","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  VerificationProctoredExamInstructions,\n  DownloadSoftwareProctoredExamInstructions,\n  ReadyToStartProctoredExamInstructions,\n  PrerequisitesProctoredExamInstructions,\n  SkipProctoredExamInstruction,\n  OnboardingErrorProctoredExamInstructions,\n} from './proctored_exam';\nimport { isEmpty, shouldRenderExpiredPage } from '../helpers';\nimport {\n  ExamStatus,\n  VerificationStatus,\n  ExamType,\n  IS_ONBOARDING_ERROR,\n} from '../constants';\nimport ExamStateContext from '../context';\nimport EntranceExamInstructions from './EntranceInstructions';\nimport SubmitExamInstructions from './SubmitInstructions';\nimport RejectedInstructions from './RejectedInstructions';\nimport ErrorExamInstructions from './ErrorInstructions';\nimport SubmittedExamInstructions from './SubmittedInstructions';\nimport VerifiedExamInstructions from './VerifiedInstructions';\nimport ExpiredInstructions from './ExpiredInstructions';\n\nconst Instructions = ({ children }) => {\n  const state = useContext(ExamStateContext);\n  const { exam, verification } = state;\n  const { attempt, type: examType, prerequisite_status: prerequisitesData } = exam || {};\n  const prerequisitesPassed = prerequisitesData ? prerequisitesData.are_prerequisites_satisifed : true;\n  let verificationStatus = verification.status || '';\n  const { verification_url: verificationUrl } = attempt || {};\n  const [skipProctoring, toggleSkipProctoring] = useState(false);\n  const toggleSkipProctoredExam = () => toggleSkipProctoring(!skipProctoring);\n  const expired = shouldRenderExpiredPage(exam);\n\n  if (expired) {\n    return <ExpiredInstructions />;\n  }\n\n  const renderEmptyAttemptInstructions = () => {\n    let component = <EntranceExamInstructions examType={examType} skipProctoredExam={toggleSkipProctoredExam} />;\n    if (examType === ExamType.PROCTORED && !prerequisitesPassed) {\n      component = <PrerequisitesProctoredExamInstructions skipProctoredExam={toggleSkipProctoredExam} />;\n    }\n    return component;\n  };\n\n  // The API does not explicitly return 'expired' status, so we have to check manually.\n  // expires attribute is returned only for approved status, so it is safe to do this\n  // (meaning we won't override 'must_reverify' status for example)\n  if (verification.expires && new Date() > new Date(verification.expires)) {\n    verificationStatus = VerificationStatus.EXPIRED;\n  }\n\n  switch (true) {\n    case examType === ExamType.PROCTORED && skipProctoring:\n      return <SkipProctoredExamInstruction cancelSkipProctoredExam={toggleSkipProctoredExam} />;\n    case isEmpty(attempt) || !attempt.attempt_id:\n      return renderEmptyAttemptInstructions();\n    case attempt.attempt_status === ExamStatus.CREATED:\n      return examType === ExamType.PROCTORED && verificationStatus !== VerificationStatus.APPROVED\n        ? <VerificationProctoredExamInstructions status={verificationStatus} verificationUrl={verificationUrl} />\n        : <DownloadSoftwareProctoredExamInstructions skipProctoredExam={toggleSkipProctoredExam} />;\n    case attempt.attempt_status === ExamStatus.DOWNLOAD_SOFTWARE_CLICKED:\n      return <DownloadSoftwareProctoredExamInstructions />;\n    case attempt.attempt_status === ExamStatus.READY_TO_START:\n      return <ReadyToStartProctoredExamInstructions />;\n    case attempt.attempt_status === ExamStatus.READY_TO_SUBMIT:\n      return <SubmitExamInstructions />;\n    case attempt.attempt_status === ExamStatus.SUBMITTED:\n      return <SubmittedExamInstructions examType={examType} />;\n    case attempt.attempt_status === ExamStatus.VERIFIED:\n      return <VerifiedExamInstructions examType={examType} />;\n    case attempt.attempt_status === ExamStatus.REJECTED:\n      return <RejectedInstructions examType={examType} />;\n    case attempt.attempt_status === ExamStatus.ERROR:\n      return <ErrorExamInstructions examType={examType} />;\n    case attempt.attempt_status === ExamStatus.READY_TO_RESUME:\n      return <EntranceExamInstructions examType={examType} skipProctoredExam={toggleSkipProctoredExam} />;\n    case examType === ExamType.PROCTORED && IS_ONBOARDING_ERROR(attempt.attempt_status):\n      return <OnboardingErrorProctoredExamInstructions />;\n    default:\n      return children;\n  }\n};\n\nInstructions.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Instructions;\n"],"file":"index.js"}