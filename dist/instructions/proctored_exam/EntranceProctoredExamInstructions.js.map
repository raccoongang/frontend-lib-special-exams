{"version":3,"sources":["../../../src/instructions/proctored_exam/EntranceProctoredExamInstructions.jsx"],"names":["EntranceProctoredExamInstructions","skipProctoredExam","state","ExamStateContext","exam","createProctoredExamAttempt","allowProctoringOptOut","attempt","total_time","totalTime","attempt_status","ExamStatus","READY_TO_RESUME","propTypes","PropTypes","func","isRequired"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,iCAAiC,GAAG,SAApCA,iCAAoC,OAA2B;AAAA,MAAxBC,iBAAwB,QAAxBA,iBAAwB;AACnE,MAAMC,KAAK,GAAG,uBAAWC,gBAAX,CAAd;AACA,MAAQC,IAAR,GAAoEF,KAApE,CAAQE,IAAR;AAAA,MAAcC,0BAAd,GAAoEH,KAApE,CAAcG,0BAAd;AAAA,MAA0CC,qBAA1C,GAAoEJ,KAApE,CAA0CI,qBAA1C;;AACA,cAAoBF,IAAI,IAAI,EAA5B;AAAA,MAAQG,OAAR,SAAQA,OAAR;;AACA,4BAAsCA,OAAtC,CAAQC,UAAR;AAAA,MAAoBC,SAApB,oCAAgC,CAAhC;AAEA,sBACE,4DACIF,OAAO,CAACG,cAAR,KAA2BC,sBAAWC,eAAtC,gBACA,uDACE;AAAK,IAAA,SAAS,EAAC,IAAf;AAAoB,mBAAY;AAAhC,kBACE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,mDADL;AAEE,IAAA,cAAc,EAAC;AAFjB,IADF,CADF,eAOE,qDACE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,kDADL;AAEE,IAAA,cAAc,EAAC,kDAFjB;AAGE,IAAA,MAAM,EAAE;AAAEH,MAAAA,SAAS,EAATA;AAAF;AAHV,IADF,CAPF,CADA,gBAiBA;AAAK,IAAA,SAAS,EAAC,IAAf;AAAoB,mBAAY;AAAhC,kBACE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,8CADL;AAEE,IAAA,cAAc,EAAC;AAFjB,IADF,CAlBJ,eAyBE,qDACE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,8CADL;AAEE,IAAA,cAAc,EAAE,sFACd;AAHJ,IADF,CAzBF,eAgCE;AAAG,IAAA,SAAS,EAAC;AAAb,kBACE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,8CADL;AAEE,IAAA,cAAc,EAAC;AAFjB,IADF,CAhCF,eAsCE;AAAG,IAAA,SAAS,EAAC;AAAb,kBACE,6BAAC,eAAD;AACE,mBAAY,mBADd;AAEE,IAAA,OAAO,EAAC,SAFV;AAGE,IAAA,OAAO,EAAEJ;AAHX,kBAKE,6BAAC,sBAAD;AACE,IAAA,EAAE,EAAC,gDADL;AAEE,IAAA,cAAc,EAAC;AAFjB,IALF,CADF,CAtCF,EAkDGC,qBAAqB,iBAAI,6BAAC,gCAAD;AAAyB,IAAA,WAAW,EAAEL;AAAtC,IAlD5B,CADF;AAsDD,CA5DD;;AA8DAD,iCAAiC,CAACa,SAAlC,GAA8C;AAC5CZ,EAAAA,iBAAiB,EAAEa,mBAAUC,IAAV,CAAeC;AADU,CAA9C;eAIehB,iC","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { ExamStatus } from '../../constants';\nimport ExamStateContext from '../../context';\nimport SkipProctoredExamButton from './SkipProctoredExamButton';\n\nconst EntranceProctoredExamInstructions = ({ skipProctoredExam }) => {\n  const state = useContext(ExamStateContext);\n  const { exam, createProctoredExamAttempt, allowProctoringOptOut } = state;\n  const { attempt } = exam || {};\n  const { total_time: totalTime = 0 } = attempt;\n\n  return (\n    <>\n      { attempt.attempt_status === ExamStatus.READY_TO_RESUME ? (\n        <div>\n          <div className=\"h3\" data-testid=\"proctored-exam-instructions-title\">\n            <FormattedMessage\n              id=\"exam.ReadyToResumeProctoredExamInstructions.title\"\n              defaultMessage=\"Your exam is ready to be resumed.\"\n            />\n          </div>\n          <p>\n            <FormattedMessage\n              id=\"exam.ReadyToResumeProctoredExamInstructions.text\"\n              defaultMessage=\"You will have {totalTime} to complete your exam.\"\n              values={{ totalTime }}\n            />\n          </p>\n        </div>\n      ) : (\n        <div className=\"h3\" data-testid=\"proctored-exam-instructions-title\">\n          <FormattedMessage\n            id=\"exam.EntranceProctoredExamInstructions.title\"\n            defaultMessage=\"This exam is proctored\"\n          />\n        </div>\n      )}\n      <p>\n        <FormattedMessage\n          id=\"exam.EntranceProctoredExamInstructions.text1\"\n          defaultMessage={'To be eligible for credit or the program credential associated with this course, '\n          + 'you must pass the proctoring review for this exam.'}\n        />\n      </p>\n      <p className=\"mt-4 pl-md-4\">\n        <FormattedMessage\n          id=\"exam.EntranceProctoredExamInstructions.text2\"\n          defaultMessage=\"You will be guided through steps to set up online proctoring software and verify your identity.\"\n        />\n      </p>\n      <p className=\"pl-md-4\">\n        <Button\n          data-testid=\"start-exam-button\"\n          variant=\"primary\"\n          onClick={createProctoredExamAttempt}\n        >\n          <FormattedMessage\n            id=\"exam.startExamInstructions.startExamButtonText\"\n            defaultMessage=\"Continue to my proctored exam.\"\n          />\n        </Button>\n      </p>\n      {allowProctoringOptOut && <SkipProctoredExamButton handleClick={skipProctoredExam} />}\n    </>\n  );\n};\n\nEntranceProctoredExamInstructions.propTypes = {\n  skipProctoredExam: PropTypes.func.isRequired,\n};\n\nexport default EntranceProctoredExamInstructions;\n"],"file":"EntranceProctoredExamInstructions.js"}