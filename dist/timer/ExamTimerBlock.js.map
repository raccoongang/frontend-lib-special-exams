{"version":3,"sources":["../../src/timer/ExamTimerBlock.jsx"],"names":["ExamTimerBlock","attempt","stopExamAttempt","expireExamAttempt","pollExamAttempt","intl","pingAttempt","submitExam","isShowMore","showMore","showLess","alertVariant","setAlertVariant","timeReachedNull","setTimeReachedNull","attempt_status","onLowTime","onCriticalLowTime","onTimeReachedNull","handleEndExamClick","Emitter","once","TIMER_IS_LOW","TIMER_IS_CRITICALLY_LOW","TIMER_LIMIT_REACHED","TIMER_REACHED_NULL","off","exam_url_path","exam_display_name","examType","exam_type","formatMessage","id","defaultMessage","ExamStatus","READY_TO_SUBMIT","accessibility_time_string","propTypes","PropTypes","shape","string","isRequired","time_remaining_seconds","number","low_threshold_sec","critically_low_threshold_sec","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from '@edx/frontend-platform/i18n';\nimport { Button, Alert, useToggle } from '@edx/paragon';\nimport CountDownTimer from './CountDownTimer';\nimport { ExamStatus, IS_STARTED_STATUS } from '../constants';\nimport TimerProvider from './TimerProvider';\nimport { Emitter } from '../data';\nimport {\n  TIMER_IS_CRITICALLY_LOW,\n  TIMER_IS_LOW,\n  TIMER_LIMIT_REACHED,\n  TIMER_REACHED_NULL,\n} from './events';\n\n/**\n * Exam timer block component.\n */\nconst ExamTimerBlock = injectIntl(({\n  attempt, stopExamAttempt, expireExamAttempt, pollExamAttempt,\n  intl, pingAttempt, submitExam,\n}) => {\n  const [isShowMore, showMore, showLess] = useToggle(false);\n  const [alertVariant, setAlertVariant] = useState('info');\n  const [timeReachedNull, setTimeReachedNull] = useState(false);\n\n  if (!attempt || !IS_STARTED_STATUS(attempt.attempt_status)) {\n    return null;\n  }\n\n  const onLowTime = () => setAlertVariant('warning');\n  const onCriticalLowTime = () => setAlertVariant('danger');\n  const onTimeReachedNull = () => setTimeReachedNull(true);\n\n  const handleEndExamClick = () => {\n    // if timer reached 00:00 submit exam right away\n    // instead of trying to move user to ready_to_submit page\n    if (timeReachedNull) {\n      submitExam();\n    } else {\n      stopExamAttempt();\n    }\n  };\n\n  useEffect(() => {\n    Emitter.once(TIMER_IS_LOW, onLowTime);\n    Emitter.once(TIMER_IS_CRITICALLY_LOW, onCriticalLowTime);\n    Emitter.once(TIMER_LIMIT_REACHED, expireExamAttempt);\n    Emitter.once(TIMER_REACHED_NULL, onTimeReachedNull);\n\n    return () => {\n      Emitter.off(TIMER_IS_LOW, onLowTime);\n      Emitter.off(TIMER_IS_CRITICALLY_LOW, onCriticalLowTime);\n      Emitter.off(TIMER_LIMIT_REACHED, expireExamAttempt);\n      Emitter.off(TIMER_REACHED_NULL, onTimeReachedNull);\n    };\n  }, []);\n\n  return (\n    <TimerProvider attempt={attempt} pollHandler={pollExamAttempt} pingHandler={pingAttempt}>\n      <Alert variant={alertVariant}>\n        <div\n          className=\"d-flex justify-content-between flex-column flex-lg-row align-items-start\"\n          data-testid=\"exam-timer\"\n        >\n          <div>\n            <FormattedMessage\n              id=\"exam.examTimer.text\"\n              defaultMessage='You are taking \"'\n            />\n            <Alert.Link href={attempt.exam_url_path}>\n              {attempt.exam_display_name}\n            </Alert.Link>\n            <FormattedMessage\n              id=\"exam.examTimer.text\"\n              defaultMessage='\" as {examType}. '\n              values={{ examType: attempt.exam_type }}\n            />\n            {\n              isShowMore\n                ? (\n                  <span>\n                    <FormattedMessage\n                      id=\"exam.examTimer.showLess\"\n                      defaultMessage={'The timer on the right shows the time remaining in the exam. '\n                        + 'To receive credit for problems, you must select \"Submit\" '\n                        + 'for each problem before you select \"End My Exam\" '}\n                    />\n                    <Alert.Link onClick={showLess}>\n                      <FormattedMessage\n                        id=\"exam.examTimer.showLessLink\"\n                        defaultMessage=\"Show less\"\n                      />\n                    </Alert.Link>\n                  </span>\n                )\n                : (\n                  <Alert.Link onClick={showMore}>\n                    <FormattedMessage\n                      id=\"exam.examTimer.showMoreLink\"\n                      defaultMessage=\"Show more\"\n                    />\n                  </Alert.Link>\n                )\n            }\n          </div>\n          <div\n            className=\"d-flex align-items-center flex-shrink-0 ml-lg-3 mt-2 mt-lg-0\"\n            aria-label={intl.formatMessage({\n              id: 'exam.aria.examTimerAndEndExamButton',\n              defaultMessage: 'Exam timer and end exam button',\n            })}\n          >\n\n            {attempt.attempt_status !== ExamStatus.READY_TO_SUBMIT && (\n              <Button data-testid=\"end-button\" className=\"mr-3\" variant=\"outline-primary\" onClick={handleEndExamClick}>\n                <FormattedMessage\n                  id=\"exam.examTimer.endExamBtn\"\n                  defaultMessage=\"End My Exam\"\n                />\n              </Button>\n            )}\n            <span className=\"sr-only timer-announce\" aria-live=\"assertive\">{attempt.accessibility_time_string}</span>\n\n            <CountDownTimer />\n\n          </div>\n        </div>\n      </Alert>\n    </TimerProvider>\n  );\n});\n\nExamTimerBlock.propTypes = {\n  attempt: PropTypes.shape({\n    exam_url_path: PropTypes.string.isRequired,\n    exam_display_name: PropTypes.string.isRequired,\n    time_remaining_seconds: PropTypes.number.isRequired,\n    low_threshold_sec: PropTypes.number.isRequired,\n    critically_low_threshold_sec: PropTypes.number.isRequired,\n  }),\n  stopExamAttempt: PropTypes.func.isRequired,\n  expireExamAttempt: PropTypes.func.isRequired,\n  submitExam: PropTypes.func.isRequired,\n};\n\nexport default ExamTimerBlock;\n"],"file":"ExamTimerBlock.js"}